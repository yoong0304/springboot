<div id="comments-list">
    {{#commentDtos}}
        <div class="card m-2 border-primary" id="comments-{{id}}">
            <div class="card-header">
                {{nickname}}
                <!--        수정 버튼 추가        -->
                <button class="btn btn-sm btn-outline-primary" data-bs-toggle="modal"
                        data-bs-target="#comment-edit-modal"
                        data-bs-id="{{id}}"
                        data-bs-nickname="{{nickname}}"
                        data-bs-body="{{body}}"
                        data-bs-article-id="{{articleId}}"
                >수정</button>
                <!-- 댓글 삭제 버튼 -->
                <button type="button"
                        class="btn btn-sm btn-outline-danger comment-delete-btn"
                data-comment-id="{{id}}">삭제</button>
            </div>
            <div class="card-body text-primary">
                {{body}}
            </div>
        </div>
    {{/commentDtos}}
    <!--    Modal-->
    <div class="modal" tabindex="-1" id="comment-edit-modal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">댓글 수정</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form action="">
                        <!--     닉네임 입력       -->
                        <div class="mb-3">
                            <label for="" class="form-label">닉네임</label>
                            <input type="text" class="form-control-sm" id="edit-comment-nickname">
                        </div>

                        <!--     댓글 본문 입력       -->
                        <div class="mb-3">
                            <label for="" class="form-label">댓글 내용</label>
                            <textarea type="text" class="form-control form-control-sm" rows="3"
                                      id="edit-comment-body"></textarea>
                        </div>

                        <!--      히든 값      -->
                        <input type="hidden" id="edit-comment-id">
                        <input type="hidden" id="edit-comment-article-id">

                        <!--      전송버튼      -->
                        <button type="button" class="btn btn-outline-primary btn-sm" id="comment-update-btn">댓글작성
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
<!--모달 이벤트 처리-->
<script>
{
    //모달요소 선택
    const commentEditModal = document.querySelector("#comment-edit-modal");
    commentEditModal.addEventListener("show.bs.modal", function(event){
    // 트리거 버튼 선택
        const triggerBtn = event.relatedTarget;
        // 데이터 가져오기
        const id = triggerBtn.getAttribute("data-bs-id");
        const nickname = triggerBtn.getAttribute("data-bs-nickname");
        const body = triggerBtn.getAttribute("data-bs-body");
        const articleId = triggerBtn.getAttribute("data-bs-article-id");
        console.log(`${id}, ${nickname}, ${body}, ${articleId}`);
        //데이터를 반영
        document.querySelector("#edit-comment-nickname").value = nickname;
        document.querySelector("#edit-comment-body").value = body;
        document.querySelector("#edit-comment-id").value = id;
        document.querySelector("#edit-comment-article-id").value = articleId;
    });
}

{
 //댓글 수정 버튼 변수화
 const commentUpdateBtn = document.querySelector("#comment-update-btn");

 // 댓글 클릭 이벤트 감지
 commentUpdateBtn.addEventListener("click", function(){
    //console.log("버튼이 클릭 되었습니다.");
    // 새 댓글 객체 생성
    const comment = {
    id:document.querySelector("#edit-comment-id").value,
    nickname:document.querySelector("#edit-comment-nickname").value,
    body: document.querySelector("#edit-comment-body").value,
    article_id: document.querySelector("#edit-comment-article-id").value
    };
    // 댓글 객체 출력
    console.log(comment);

    // fetch() - 비동기 통신을 위한 api
    const url = "/api/comments/" + comment.id;

        fetch(url, {
            method: "PATCH",
            body: JSON.stringify(comment),
            headers: {
                "Content-Type": "application/json"
            }
            }).then(response => {
                //http 응답코드에 따른 메시지 출력
                const msg = (response.ok) ? "댓글이 수정되었습니다." : "댓글 수정 실패..!";
                alert(msg);
                // 현재 페이지 새로고침
                window.location.reload();
            });
        });
 }

</script>
<!-- 댓글 삭제-->
<script>
{
// 삭제 버튼 선택
const commentDeleteBtns = document.querySelectorAll(".comment-delete-btn");
// 삭제 버튼 이벤트 처리
commentDeleteBtns.forEach(btn => {           // 버튼이 여러개?면 forEach를 해줘야 된다?
    // 각 버튼의 이벤트 처리 등록
    btn.addEventListener("click", () => {
        //console.log("삭제 버튼이 클릭되었습니다.");
        // 이벤트가 발생 요소를 선택
        const commentDeleteBtn = event.target;

        // 삭제 댓글 id 가져오기
        const commentId = commentDeleteBtn.getAttribute("data-comment-id");     // 삭제의 글 번호를 가져옴
        // console.log("삭제 버튼 클릭 : " + commentId + "번 댓글");
        console.log(`삭제 버튼 클릭 : ${commentId} 번 댓글`);    // 위에 내용과 동일한 효과, 전체는 백틱으로(`) 변수는 $하고 중괄호로 묶어준다.

        // 삭제 API 호출 및 처리
        // const url = "/api/comment/" + commentId ;
        const url = `/api/comments/${commentId}`;
        fetch(url, {
            method : "DELETE"
        }).then(response => {
            // 댓글 삭제 실패 처리
            if(!response.ok){
                alert("댓글 삭제 실패..");
                return;
            }
            // 삭제 성공시, 댓글을 화면에서 지움
            const target = document.querySelector(`#comments-${commentId}`);
            target.remove();        //js 에서 지우는 기능 remove
        });

    });
});
}
</script>